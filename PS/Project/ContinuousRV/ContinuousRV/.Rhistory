# 2.
# Functia originala nu este normalizata
isPDF(fn)
# 2.
# Functia originala nu este normalizata
isPDF(fn, 0, 1)
fn <- function(x) {x^2}
library(ContinuousRV)
# 1.
crv <- CRV(fn, 0, 1) # 3.
findNormalizationConstant(fn, 0, 1)
# 2.
# Functia originala nu este normalizata
isPDF(fn, 0, 1)
# Functia este automat normalizata in constructorul lui CRV
isPDF(crv@fn, 0, 1)
# 4.
plot(testCrv)
# 4.
plot(crv)
# 5.
mean(crv)
variance(crv)
initialMoment(crv, 4)
# 6.
# prepareFunction este un wrapper un jurul unei functii, care returneaza o
# functie ce primeste ca parametru un CRV, incat sa putem apela g(X), in cazul nostru g(crv)
g <- prepareFunction(function(x) {x^2})
mean(g(crv))
variance(g(crv))
g(crv)@fn
g(crv)@fn(1)
findNormalizationConstant(g(crv)@originalFn, 0, 1)
findNormalizationConstant(g(crv)@originalFn, 0, 1) * 9
fn <- function(x) {1}
# 1.
crv <- CRV(fn, 0, 1) # 3.
findNormalizationConstant(fn, 0, 1)
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
findNormalizationConstant(fn, 0, 1)
# 5.
mean(crv)
findNormalizationConstant(Vectorize(fn), 0, 1)
# 2.
# Functia originala nu este normalizata
isPDF(fn, 0, 1)
# Functia este automat normalizata in constructorul lui CRV
isPDF(crv@fn, 0, 1)
# 4.
plot(crv)
fn <- function(x) {x}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
findNormalizationConstant(fn, 0, 1)
# 4.
plot(crv)
fn <- function(x) {1}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
findNormalizationConstant(fn, 0, 1)
# 4.
plot(crv)
library(ContinuousRV)
# 5.
mean(crv)
variance(crv)
initialMoment(crv, 4)
library(ContinuousRV)
variance(crv)
centralMomen(crv, 1)
centralMoment(crv, 1)
centralMoment(crv, 2)
centralMoment(crv, 0)
centralMoment(crv, 1)
centralMoment(crv, 2)
variance(crv)
centralMoment(crv, 3)
centralMoment(crv, 4)
variance(crv)
centralMoment(crv, 2)
initialMoment(crv, 4)
# 6.
# prepareFunction este un wrapper un jurul unei functii, care returneaza o
# functie ce primeste ca parametru un CRV, incat sa putem apela g(X), in cazul nostru g(crv)
g <- prepareFunction(function(x) {x^2})
mean(g(crv))
variance(g(crv))
fn <- function(x) {x}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
# 6.
# prepareFunction este un wrapper un jurul unei functii, care returneaza o
# functie ce primeste ca parametru un CRV, incat sa putem apela g(X), in cazul nostru g(crv)
g <- prepareFunction(function(x) {x^2})
mean(g(crv))
variance(g(crv))
g@fn(1)
g(crv)@fn(1)
mean(g(crv))
variance(g(crv))
P(testCrv > 0.9)
P(crv > 0.9)
fn <- function(x) {1}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
P(crv > 0.9)
P(crv < 0.7)
P(crv > 0.7)
P(crv > 0.97 | crv < 0.5)
P(crv < 0.1 & crv > 0.9)
P(crv > 0.7 & crv < 0.9)
P(crv < 0.7 | crv > 0.9)
P(crv < 0.7 & crv > 0.9)
library(ContinuousRV)
library(ContinuousRV)
nonPdfFn <- function(x) {x}
# Returns FALSE
isPDF(nonPdfFn, 0, 1)
pdfFn <- function(x) {2 * x}
# Returns TRUE
isPDF(pdfFn, 0, 1)
findNormalizationConstant(fn, 0, 1)
findNormalizationConstant(Vectorize(fn), 0, 1)
findNormalizationConstant(Vectorize(fn), -Inf, Inf)
library(ContinuousRV)
library(ContinuousRV)
unnormalizedFn <- function(x) {x}
# Returns 2
findNormalizationConstant(unnormalizedFn, 0, 1)
# Returns NaN
findNormalizationConstant(unnormalizedFn, -Inf, Inf)
# Returns NaN
findNormalizationConstant(unnormalizedFn, 0, Inf)
library(ContinuousRV)
# Returns NaN
findNormalizationConstant(unnormalizedFn, -Inf, Inf)
library(ContinuousRV)
# Returns NaN
findNormalizationConstant(unnormalizedFn, -Inf, Inf)
# Returns NaN
findNormalizationConstant(unnormalizedFn, 0, Inf)
# Returns 2
findNormalizationConstant(unnormalizedFn, 0, 1)
install.packages("discreteRV")
library(discreteRV)
library(ContinuousRV)
library(ContinuousRV)
library(ContinuousRV)
library(ContinuousRV)
library(ContinuousRV)
# 4.
CDF(crv)
# 4.
CDF(crv, 0.5)
fn <- function(x) {x}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
# 4.
CDF(crv, 0.5)
library(ContinuousRV)
# 5.
mean(crv)
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
fn <- function(x) {x}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
# 5.
mean(crv)
library(ContinuousRV)
library(ContinuousRV)
centralMoment(crv, 0)
centralMoment(crv, 1)
variance(crv)
centralMoment(crv, 3)
centralMoment(crv, 4)
library(ContinuousRV)
# Create a new CRV object
crv <- CRV(function(x) {x}, 0, 1)
# Returns 1
initialMoment(crv, 0)
# Returns 0 - due to approximation errors, it returns a value very close to 0
initialMoment(crv, 1)
# Returns 0.055...
initialMoment(crv, 2)
# Returns -0.007407407...
initialMoment(crv, 3)
# Returns 0.007407407...
initialMoment(crv, 4)
variance(crv)
library(ContinuousRV)
# Create a new CRV object
crv <- CRV(function(x) {x}, 0, 1)
# g will be a callable function
g <- prepareFunction(function(x) {x^2})
# Apply g to the previously defined crv
# The returned crv's function gets normalized by the CRV constructor and is now 5x^2 (crv's PDF is 2x, )
crvWithGapplied <- g(crv)
crvWithGapplied
crvWithGapplied@fn(1)
P(crv < 0.7 & crv > 0.9)
P(crv < 0.7 | crv > 0.9)
P(crv < 0.1 & crv > 0.9)
P(crv > 0.7 & crv < 0.9)
P(crv > 0.97 | crv < 0.5)
fn <- function(x) {x}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
P(crv < 0.7)
# 1.
crv <- CRV(fn, 0, 1) # 3.
P(crv > 0.9)
fn <- function(x) {1}
# 1.
crv <- CRV(fn, 0, 1) # 3.
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
P(crv > 0.9)
# 7.
CDF(crv, 0.7)
P(crv < 0.7)
library(ContinuousRV)
P(crv > 0.9)
library(ContinuousRV)
P(crv > 0.9)
P(crv < 0.7)
library(ContinuousRV)
P(crv < 0.7 | crv > 0.9)
P(crv > 0.9)
P(crv < 0.7)
crv < 0.7
P(crv < 0.7)
detach("package:discreteRV", unload = TRUE)
P(crv < 0.7)
library(ContinuousRV)
# 7.
P(crv > 0.9)
P(crv < 0.7)
P(crv < 0.7 | crv > 0.9)
P(crv < 0.7 & crv > 0.9)
P(crv < 0.1 & crv > 0.9)
P(crv > 0.7 & crv < 0.9)
P(crv > 0.97 | crv < 0.5)
P(crv < 0.97 | crv > 0.5)
P(crv > 0.9)
P(crv < 0.7)
P(crv < 0.7 | crv > 0.9)
P(crv < 0.7 & crv > 0.9)
P(crv > 0.7 & crv < 0.9)
P(crv > 0.97 | crv < 0.5)
P(crv < 0.97 | crv > 0.5)
clear
cls
clear()
library(ContinuousRV)
library(ContinuousRV)
initialMoment(crv, 0)
fn <- function(x) {1}
# 1.
crv <- CRV(Vectorize(fn), 0, 1) # 3.
initialMoment(crv, 0)
initialMoment(crv, 1)
initialMoment(crv, 2)
initialMoment(crv, 3)
initialMoment(crv, 4)
fn <- function(x) {x}
mean(crv)
centralMoment(crv, 0)
centralMoment(crv, 1)
variance(crv)
centralMoment(crv, 3)
centralMoment(crv, 4)
initialMoment(crv, 0)
initialMoment(crv, 1)
initialMoment(crv, 2)
initialMoment(crv, 3)
initialMoment(crv, 4)
fn <- function(x) {x}
# 1.
crv <- CRV(fn, 0, 1) # 3.
# 5.
mean(crv)
fn <- function(x) {x}
# 1.
crv <- CRV(fn, 0, 1) # 3.
# Returns 0.5
mean(crv)
# Returns 1
centralMoment(crv, 0)
# Returns approx 0
centralMoment(crv, 1)
# Returns 0.08333333
variance(crv)
# Returns approx 0
centralMoment(crv, 3)
# Returns 0.0125
centralMoment(crv, 4)
# Returns 1
initialMoment(crv, 0)
# Returns 0.5
initialMoment(crv, 1)
# Returns 0.3333333
initialMoment(crv, 2)
# Returns 0.25
initialMoment(crv, 3)
# Returns 0.2
initialMoment(crv, 4)
# Returns 0.055...
variance(crv)
library(ContinuousRV)
library(ContinuousRV)
fn <- function(x) {x}
# 1.
crv <- CRV(fn, 0, 1) # 3.
# 6.
# prepareFunction este un wrapper un jurul unei functii, care returneaza o
# functie ce primeste ca parametru un CRV, incat sa putem apela g(X), in cazul nostru g(crv)
g <- prepareFunction(function(x) {x^2})
mean(g(crv))
variance(g(crv))
# 6.
# prepareFunction este un wrapper in jurul unei functii, care returneaza o
# functie ce primeste ca parametru un CRV, incat sa putem apela g(X), in cazul nostru g(crv)
# Create a new CRV object
crv <- CRV(function(x) {x}, 0, 1)
g <- prepareFunction(function(x) {x^2})
# Returns 0.75
mean(g(crv))
# Returns 0.0375
variance(g(crv))
findNormalizationConstant(Vectorize(fn), -Inf, Inf)
findNormalizationConstant(fn, 0, 1)
findNormalizationConstant(fn, -Inf, Inf)
CrvLogical <- function(comp1, operand, comp2) {
value <- 0
if (class(comp1) == "CRV" && class(comp2) == "numeric") {
if(operand == "<") {
value <- CDF(comp1, comp2)
} else if(operand == ">") {
value <- 1 - CDF(comp1, comp2)
}
} else if (class(comp1) == "CrvLogical" && class(comp2) == "CrvLogical") {
if (operand == "&") {
value <- (comp1@value + comp2@value) - 1
if (value < 0) {
value <- 0
}
} else if (operand == "|") {
value <- comp1@value + comp2@value
if (value > 1) {
value <- 1
}
}
}
new(
"CrvLogical",
comp1 = comp1,
operand = operand,
comp2 = comp2,
value = value
)
}
library(ContinuousRV)
# Returns 0.2
P(crv > 0.7 & crv < 0.9)
X <- CRV(function(x) {1}, 0, 1) # 3.
X <- CRV(function(x) {1}, 0, 1)
# 7.
# Returns 0.1
P(X > 0.9)
X <- CRV(Vectorize(function(x) {1}), 0, 1)
# 7.
# Returns 0.1
P(X > 0.9)
# Returns 0.7
P(X < 0.7)
# Returns 0.8
P(X < 0.7 | X > 0.9)
# Returns 0.2
P(X > 0.7 & X < 0.9)
# Returns 0.53
P(X > 0.97 | X < 0.5)
# Returns 1
P(X < 0.97 | X > 0.5)
P <- lapply(x@domain$seq(0.001), crv@fn)
plot(x@domain$seq(0.001), P)
P <- lapply(crv@domain$seq(0.001), crv@fn)
plot(crv@domain$seq(0.001), P)
library(ContinuousRV)
library(ContinuousRV)
plot(crv)
# 4.
CDF(crv, 0.5)
# 4.
# Create a new CRV object
crv <- CRV(function(x) {x}, 0, 1)
# Returns 0.666...
CDF(crv, 0.5)
library(ContinuousRV)
help("normalDistribution")
# 11.
pdfComun <- function(x, y) {3*y/2}
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
library(ContinuousRV)
# 11.
pdfComun <- function(x, y) {3*y/2}
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
library(ContinuousRV)
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
# 11.
pdfComun <- function(x, y) {(x+2*y)^2}
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
library(ContinuousRV)
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
library(ContinuousRV)
# 11.
pdfComun <- function(x, y) {3/8*(x+2*y)^2}
marginalByX(pdfComun, 1, 0, 1)
marginalByY(pdfComun, 1, 0, 1)
fn <- function(x) {x}
# 1.
crv <- CRV(fn, 0, 1) # 3.
# Returns 2
findNormalizationConstant(unnormalizedFn, 0, 1)
# Returns 2
findNormalizationConstant(fn, 0, 1)
# Returns NaN
findNormalizationConstant(fn, -Inf, Inf)
library(ContinuousRV)
fn <- function(x) {x}
# 1.
# Returns 2
findNormalizationConstant(fn, 0, 1)
# Returns NaN
findNormalizationConstant(fn, -Inf, Inf)
# 2.
# Functia originala nu este normalizata
isPDF(fn, 0, 1)
# Functia este automat normalizata in constructorul lui CRV
isPDF(crv@fn, 0, 1)
# 4.
# Create a new CRV object
crv <- CRV(function(x) {x}, 0, 1)
# Returns 0.25
CDF(crv, 0.5)
# Plots both the PDF graph and the CDF graph
plot(crv)
# 5.
# Returns 0.666...
mean(crv)
# Returns 0.055...
variance(crv)
# Returns 1
centralMoment(crv, 0)
# Returns approx 0
centralMoment(crv, 1)
# Returns 0.055...
centralMoment(crv, 2)
# Returns -0.007407407...
centralMoment(crv, 3)
# Returns 0.007407407...
centralMoment(crv, 4)
# Returns 1
initialMoment(crv, 0)
# Returns 0.666...
initialMoment(crv, 1)
# Returns 0.5
initialMoment(crv, 2)
# Returns 0.4
initialMoment(crv, 3)
# Returns 0.333...
initialMoment(crv, 4)
# 6.
# Prepare the passed function to be used with CRVs
g <- prepareFunction(function(x) {x^2})
# Returns 0.75
mean(g(crv))
# Returns 0.0375
variance(g(crv))
# Create the simplest function to check the validity of results
X <- CRV(Vectorize(function(x) {1}), 0, 1)
# 7.
# Returns 0.1
P(X > 0.9)
# Returns 0.7
P(X < 0.7)
# Returns 0.8
P(X < 0.7 | X > 0.9)
# Returns 0.2
P(X > 0.7 & X < 0.9)
# Returns 0.53
P(X > 0.97 | X < 0.5)
# Returns 1
P(X < 0.97 | X > 0.5)
# 11.
# Create a joint PDF
pdfComun <- function(x, y) {3/8*(x+2*y)^2}
# Returns 1.625
marginalByX(pdfComun, 1, 0, 1)
# Returns 2.375
marginalByY(pdfComun, 1, 0, 1)
# 2.
# Functia originala nu este normalizata
isPDF(fn, 0, 1)
# Functia este automat normalizata in constructorul lui CRV
isPDF(crv@fn, 0, 1)
